---
substitutions:
  name: esp32-s3-box-3
  friendly_name: ESP32 S3 Box 3
  loading_illustration_file: https://github.com/esphome/firmware/raw/main/voice-assistant/casita/loading_320_240.png
  idle_illustration_file: https://github.com/esphome/firmware/raw/main/voice-assistant/casita/idle_320_240.png
  listening_illustration_file: https://github.com/esphome/firmware/raw/main/voice-assistant/casita/listening_320_240.png
  thinking_illustration_file: https://github.com/esphome/firmware/raw/main/voice-assistant/casita/thinking_320_240.png
  replying_illustration_file: https://github.com/esphome/firmware/raw/main/voice-assistant/casita/replying_320_240.png
  error_illustration_file: https://github.com/esphome/firmware/raw/main/voice-assistant/casita/error_320_240.png
  timer_finished_illustration_file: https://github.com/esphome/firmware/raw/main/voice-assistant/casita/timer_finished_320_240.png  

  loading_illustration_background_color: "000000"
  idle_illustration_background_color: "000000"
  listening_illustration_background_color: "FFFFFF"
  thinking_illustration_background_color: "FFFFFF"
  replying_illustration_background_color: "FFFFFF"
  error_illustration_background_color: "000000"
  text_outline_color: "888888"

  voice_assist_idle_phase_id: "1"
  voice_assist_listening_phase_id: "2"
  voice_assist_thinking_phase_id: "3"
  voice_assist_replying_phase_id: "4"
  voice_assist_not_ready_phase_id: "10"
  voice_assist_error_phase_id: "11"
  voice_assist_playing_id: "12"
  volume_up_phase_id: "13"
  volume_down_phase_id: "14"
  voice_assist_timer_finished_phase_id: "20"

    # Replace "Area_Name" with the Room / Area name you want to Display to the Temperature & Humidity Sensor of the AHT20 (if used with DOCK)
  sensor_area: "Art room"

  # These unique characters have been extracted from every test file of every language available on https://github.com/home-assistant/intents (14 March 2024)
  allowed_characters: " !#%\"'()+,-./0123456789:;<>?@ABCDEFGHIJKLMNOPQRSTUVWYZ[]_abcdefghijklmnopqrstuvwxyz{|}°²³µ¿ÁÂÄÅÉÖÚßàáâãäåæçèéêëìíîðñòóôõöøùúûüýþāăąćčďĐđēėęěğĮįıļľŁłńňőřśšťũūůűųźŻżŽžơưșțΆΈΌΐΑΒΓΔΕΖΗΘΚΜΝΠΡΣΤΥΦάέήίαβγδεζηθικλμνξοπρςστυφχψωϊόύώАБВГДЕЖЗИКЛМНОПРСТУХЦЧШЪЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюяёђєіїјљњћאבגדהוזחטיכלםמןנסעפץצקרשת،ءآأإئابةتجحخدذرزسشصضطظعغفقكلمنهوىيٹپچڈکگںھہیےংকচতধনফবযরলশষস়ািু্చయలిెొ్ംഅആഇഈഉഎഓകഗങചജഞടഡണതദധനപഫബഭമയരറലളവശസഹാിീുൂെേൈ്ൺൻർൽൾაბგდევზთილმნოპრსტუფქყშჩცძჭხạảấầẩậắặẹẽếềểệỉịọỏốồổỗộớờởợụủứừửữựỳ—、一上不个中为主乾了些亮人任低佔何作供依侧係個側偵充光入全关冇冷几切到制前動區卧厅厨及口另右吊后吗启吸呀咗哪唔問啟嗎嘅嘛器圍在场執場外多大始安定客室家密寵对將小少左已帘常幫幾库度庫廊廚廳开式後恆感態成我戲戶户房所扇手打执把拔换掉控插摄整斯新明是景暗更最會有未本模機檯櫃欄次正氏水沒没洗活派温測源溫漏潮激濕灯為無煙照熱燈燥物狀玄现現瓦用發的盞目着睡私空窗立笛管節簾籬紅線红罐置聚聲脚腦腳臥色节著行衣解設調請謝警设调走路車车运連遊運過道邊部都量鎖锁門閂閉開關门闭除隱離電震霧面音頂題顏颜風风食餅餵가간감갔강개거게겨결경고공과관그금급기길깥꺼껐꼽나난내네놀누는능니다닫담대더데도동됐되된됨둡드든등디때떤뜨라래러렇렌려로료른를리림링마많명몇모무문물뭐바밝방배변보부불블빨뽑사산상색서설성세센션소쇼수스습시신실싱아안않알았애야어얼업없었에여연열옆오온완외왼요운움워원위으은을음의이인일임입있작잠장재전절정제져조족종주줄중줘지직진짐쪽차창천최추출충치침커컴켜켰쿠크키탁탄태탬터텔통트튼티파팬퍼폰표퓨플핑한함해했행혀현화활후휴힘，？"

  micro_wake_word_model: hey_jarvis

  starting_up: "Starting up..."
  wake_word_prompt: "Say \\\"Hey Jarvis\\\""
  listening_prompt: "How can I help?"
  error_prompt: "Sorry, error."

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2025.2.0
  name_add_mac_suffix: true
  project:
    name: esphome.voice-assistant
    version: "2.0"  
  on_boot:
    priority: 600
    then:
      - script.execute: draw_display
      - lambda: id(speaker_volume) = id(startup_volume).state; 
      - script.execute: set_volume
      - delay: 30s
      - if:
          condition:
            lambda: return id(init_in_progress);
          then:
            - lambda: id(init_in_progress) = false;
      - script.execute: draw_display  # Draw the display again in case the on_client_connected cannot do so

esp32:
  board: esp32s3box
  flash_size: 16MB
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"


psram:
  mode: octal
  speed: 80MHz

external_components:
  - source: github://pr#5230
    components: esp_adf
    refresh: 0s


captive_portal:

api:
  on_client_connected:
    - script.execute: draw_display
  on_client_disconnected:
    - script.execute: draw_display
 

logger:
  hardware_uart: USB_SERIAL_JTAG

dashboard_import:
  package_import_url: github://esphome/firmware/wake-word-voice-assistant/esp32-s3-box-3.yaml@main

wifi:
  on_connect:
    - script.execute: draw_display
    - delay: 5s  # Gives time for improv results to be transmitted
    - ble.disable:
  on_disconnect:
    - script.execute: draw_display
    - ble.enable:
  

  
  ap:
    ssid: "Esp32-S3-Box-3 Fallback Hotspot"
    password: "P1NTQC2LiPNH"

improv_serial:

esp32_improv:
  authorizer: none

button:
  - platform: factory_reset
    id: factory_reset_btn
    name: Factory reset

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO1
      inverted: true
    name: "Mute"
    id: mute_switch
    disabled_by_default: true
    entity_category: diagnostic
    on_release:
      then:
        - switch.turn_off: mute
    on_press:
      then:    
        - switch.turn_on: mute

  - platform: gpio
    pin:
      number: GPIO21
    name: "Presence detect"
    disabled_by_default: false
    publish_initial_state: true
    device_class: "occupancy"
    filters:
      - delayed_off: !lambda return id(radar_delayed_off).state * 1000;
    on_release:
      then:
        - if:
            condition:
              and:
                - switch.is_on: mute_when_absent
                - switch.is_on: enable_radar                
            then:
              - lambda: id(mute_backup) = id(mute).state;
              - switch.turn_on: mute
              - light.turn_off: led
    on_press:
      then:
        - if:
            condition:
              switch.is_on: mute_when_absent
            then:
              - if:  
                  condition:
                    - lambda: return !id(mute_backup);
                  then:
                    - switch.turn_off: mute
              - light.turn_on: led  

  - platform: gpio
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: true
      ignore_strapping_warning: true
    name: Top Left Button
    id: top_left_button
    disabled_by_default: true
    entity_category: diagnostic
    on_multi_click:
      - timing:
          - ON for at least 50ms
          - OFF for at least 50ms
        then:
          - switch.turn_off: timer_ringing
      - timing:
          - ON for at least 10s
        then:
          - button.press: factory_reset_btn

  - platform: gt911
    name: Home Button
    index: 0
    on_press:
      then:
        - logger.log: "Home pressed"

  - platform: touchscreen
    name: Volume Minus
    x_min: 0
    x_max: 80
    y_min: 160
    y_max: 234
    on_press:
      then:
        - logger.log: "Volume Minus pressed"
        - lambda: |-
            id(speaker_volume) = static_cast<int>(id(speaker_media_player).volume * 100);
            id(speaker_volume) = id(speaker_volume) - (id(speaker_volume) % 5); // rounded to 5
        - if:
            condition:
              lambda: return id(speaker_volume) > 0;
            then:
              - lambda: id(speaker_volume) -= 5;                  
              - lambda: id(voice_assistant_phase_backup) = id(voice_assistant_phase);
              - lambda: id(voice_assistant_phase) = ${volume_down_phase_id}; 
              - script.execute: draw_display 
              - script.execute: set_volume        
              - lambda: id(voice_assistant_phase) = id(voice_assistant_phase_backup); 
              - script.execute: draw_display

  - platform: touchscreen
    name: Volume Plus
    x_min: 260
    x_max: 320
    y_min: 160
    y_max: 234
    on_press:
      then:
        - logger.log: "Volume Plus pressed"
        - lambda: |-
            id(speaker_volume) = static_cast<int>(id(speaker_media_player).volume * 100);
            id(speaker_volume) = id(speaker_volume) - (id(speaker_volume) % 5); // rounded to 5
        - if:
            condition:
              lambda: return id(speaker_volume) < 100;
            then:
              - lambda: id(speaker_volume) += 5;                  
              - lambda: id(voice_assistant_phase_backup) = id(voice_assistant_phase);
              - lambda: id(voice_assistant_phase) = ${volume_up_phase_id}; 
              - script.execute: draw_display 
              - script.execute: set_volume        
              - lambda: id(voice_assistant_phase) = id(voice_assistant_phase_backup); 
              - script.execute: draw_display         

  - platform: touchscreen
    name: Play Pause
    x_min: 0
    x_max: 320
    y_min: 0
    y_max: 240
    on_press:
      then:
        - if:
            condition:
              - switch.is_on: timer_ringing
            then:
              - switch.turn_off: timer_ringing

  - platform: touchscreen
    name: Mute Microphone
    x_min: 0
    x_max: 80
    y_min: 0
    y_max: 159
    on_press:
      then:        
        - switch.toggle: mute

  - platform: touchscreen
    name: Mute Speaker
    x_min: 260
    x_max: 320
    y_min: 0
    y_max: 159
    on_press:
      then:        
        - switch.toggle: mute_speaker

output:
  - platform: ledc
    pin: GPIO47
    id: backlight_output

light:
  - platform: monochromatic
    id: led
    name: LCD Backlight
    entity_category: config
    output: backlight_output
    restore_mode: RESTORE_DEFAULT_ON
    default_transition_length: 250ms

at581x:
  id: "Radar"
  i2c_id: bus_b

i2c:
  - id: bus_a
    sda: GPIO08
    scl: GPIO18
    scan: false
    sda_pullup_enabled: true
    scl_pullup_enabled: true
    frequency: 100kHz
  
  - id: bus_b
    sda: GPIO41
    scl: GPIO40
    scan: false
    sda_pullup_enabled: true
    scl_pullup_enabled: true
    frequency: 50kHz

i2s_audio:
  - id: i2s_audio_bus
    i2s_lrclk_pin: GPIO45
    i2s_bclk_pin: GPIO17
    i2s_mclk_pin: GPIO2
    
audio_adc:
  - id: es7210_adc
    platform: es7210
    i2c_id: bus_a
    bits_per_sample: 16bit
    sample_rate: 16000

audio_dac:
  - id: es8311_dac
    platform: es8311
    i2c_id: bus_a
    bits_per_sample: 16bit
    sample_rate: 48000

microphone:
  - platform: i2s_audio
    id: box_mic
    sample_rate: 16000
    i2s_din_pin: GPIO16
    bits_per_sample: 16bit
    adc_type: external
    
speaker:
  - platform: i2s_audio
    id: box_speaker
    i2s_dout_pin: GPIO15
    dac_type: external
    sample_rate: 48000
    bits_per_sample: 16bit
    channel: left
    audio_dac: es8311_dac
    buffer_duration: 100ms



media_player:
  - platform: speaker
    id: speaker_media_player
    name: s3-box_media_player
    announcement_pipeline:
      speaker: box_speaker
      format: FLAC
      sample_rate: 48000
      num_channels: 1  # S3 Box only has one output channel

    on_idle:
      - if:
          condition:
            - lambda: return (id(acknowledge) == false);
          then:
              - logger.log: "NOT Acknowledging.."
              - if:
                  condition:
                    - lambda: return (id(replying_to_query) == true);      
                  then:  
                      - if:  
                          condition:
                            and:
                              - switch.is_on: continued_conversation
                              - switch.is_off: timer_ringing
                          then:
                            - delay: 300ms
                            - lambda: id(voice_assistant_phase) = ${voice_assist_listening_phase_id};
                            - script.execute: stt_timeout_to_idle                    
                            - script.execute: draw_display
                          else:
                            - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
                            - script.execute: draw_display      
                      - lambda: id(replying_to_query) = false;
                  else:
                      - if:
                          condition:
                            - switch.is_off: timer_ringing
                          then:
                            - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
                            - script.execute: draw_display
          else:
            - logger.log: "Acknowledging.."
            - lambda: id(acknowledge) = false;

#    on_play:
#      - if:
#          condition:
#            - switch.is_off: timer_ringing
#          then:
#            - lambda: id(voice_assistant_phase) = ${voice_assist_playing_id};
#            - script.execute: draw_display

    on_announcement:
      - lambda: id(voice_assistant_phase) = ${voice_assist_replying_phase_id};
      - script.execute: draw_display



micro_wake_word:
  models:
    - model: ${micro_wake_word_model}
  on_wake_word_detected:
    - media_player.pause:
    - delay: 100ms
    - lambda: id(acknowledge) = true;
    - media_player.play_media: 
        id: speaker_media_player
        media_url: 'http://homeassistant.local:8123/local/sounds/acknowledge.mp3'
    - delay: 400ms
    - if:
        condition:
          switch.is_on: continued_conversation
        then:
          - lambda: id(va).set_use_wake_word(false);
          - voice_assistant.start_continuous: # wake_word: !lambda return wake_word; not yet supported for continuous
        else:
          - lambda: id(va).set_use_wake_word(false);
          - voice_assistant.start:
              wake_word: !lambda return wake_word;

voice_assistant:
  id: va
  microphone: box_mic
  media_player: speaker_media_player
  noise_suppression_level: 2
  auto_gain: 31dBFS
  volume_multiplier: 4.0
  #vad_threshold: 2
  on_listening:
    - lambda: id(voice_assistant_phase) = ${voice_assist_listening_phase_id};
    - if:
        condition:
          - switch.is_off: continued_conversation
        then:
          - text_sensor.template.publish:
              id: text_request
              state: "..."
          - text_sensor.template.publish:
              id: text_response
              state: "..."
    - script.execute: draw_display
    - if:
        condition:
          - switch.is_on: continued_conversation
        then:
          - text_sensor.template.publish:
              id: text_request
              state: ""
          - text_sensor.template.publish:
              id: text_response
              state: ""
          - script.execute: stt_timeout_to_idle
          - lambda: id(va).set_use_wake_word(false);

  on_stt_vad_end:
    - lambda: id(voice_assistant_phase) = ${voice_assist_thinking_phase_id};
    - script.execute: draw_display
  on_stt_end:
    - text_sensor.template.publish:
        id: text_request
        state: !lambda return x;
    - script.execute: draw_display
    - if:
        condition:
          switch.is_on: continued_conversation
        then:
          - if:
              condition:
                - lambda: |-
                    bool contains_letters = false;
                    for (char c : x) {
                      if (std::isalpha(c)) {
                        contains_letters = true;
                        break;
                      }
                    }
                    return contains_letters; 
              then:
                - script.execute: stt_timeout_to_idle
              else:
                - logger.log: "STT has no text"
                - voice_assistant.stop
                - script.execute: return_to_idle  
  on_tts_start:
    - text_sensor.template.publish:
        id: text_response
        state: !lambda return x;
    - if:
        condition:
          and:
            # When using extended openai conversation, add the following to the prompt
            # If you feel the user has finished and doesn't want to talk anymore, just respond with the exact phrase "Ok, bye."
            - lambda: return (x == "Ok, bye.");
            - switch.is_on: continued_conversation
        then:
          - script.execute: return_to_idle  
  on_tts_end:
    - lambda: id(voice_assistant_phase) = ${voice_assist_replying_phase_id};
    - script.execute: draw_display
    - if:
        condition:
          - switch.is_on: continued_conversation
        then:
          - lambda: id(replying_to_query) = true;
          - script.execute: stt_timeout_to_idle
  # on_tts_stream_start:
  #   - lambda: id(voice_assistant_phase) = ${voice_assist_replying_phase_id};
  #   - script.execute: draw_display
  #   - if:
  #       condition:
  #         - switch.is_on: continued_conversation
  #       then:
  #         - script.execute: stt_timeout_to_idle
  # on_tts_stream_end:
  #   - if:
  #       condition:
  #         - switch.is_on: continued_conversation
  #       then:
  #         - lambda: id(voice_assistant_phase) = ${voice_assist_listening_phase_id};
  #         - script.execute: stt_timeout_to_idle
  #       else:
  #         - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
  #   - script.execute: draw_display
  on_end:
    - if:
        condition:
          and:
            - switch.is_off: mute
            - lambda: return id(wake_word_engine_location).state == "On device";
            - switch.is_off: continued_conversation
        then:
          - script.execute: return_to_idle
  on_error:
    - if:
        condition:
          and:
            - lambda: return !id(init_in_progress);
            - lambda: return !(code == "stt-no-text-recognized");
        then:
          - lambda: id(voice_assistant_phase) = ${voice_assist_error_phase_id};
          - script.execute: draw_display
          - delay: 1s
          - script.stop: stt_timeout_to_idle
          - script.execute: draw_display
  on_client_connected:
    - script.execute: return_to_idle
    - lambda: id(init_in_progress) = false;
    - script.execute: draw_display
  on_client_disconnected:
    - if:
        condition:
          lambda: return id(wake_word_engine_location).state == "In Home Assistant";
        then:
          - lambda: id(va).set_use_wake_word(false);
          - voice_assistant.stop
    - if:
        condition:
          lambda: return id(wake_word_engine_location).state == "On device";
        then:
          - micro_wake_word.stop
    - lambda: id(voice_assistant_phase) = ${voice_assist_not_ready_phase_id};
    - script.execute: draw_display
  on_timer_started:
    - script.execute: draw_display
  on_timer_cancelled:
    - script.execute: draw_display
  on_timer_updated:
    - script.execute: draw_display
  on_timer_tick:
    - script.execute: draw_display
  on_timer_finished:
    - script.execute: stop_voice_assistant
    - lambda: id(voice_assistant_phase) = ${voice_assist_timer_finished_phase_id};
    - switch.turn_on: timer_ringing
    - script.execute: draw_display
    - wait_until:
        not:
          microphone.is_capturing:
    - while:
        condition:
          switch.is_on: timer_ringing
        then:
          - media_player.play_media:
              id: speaker_media_player
              media_url: 'http://homeassistant.local:8123/local/sounds/timer.mp3'          
          - delay: 1s
    - wait_until:
        not:
          media_player.is_playing:
    - switch.turn_off: timer_ringing
    - media_player.stop: 
        announcement: true
    - script.execute: return_to_idle    

script:
  - id: set_volume
    then:
      - media_player.volume_set:
          volume: !lambda return id(speaker_volume) * 0.01 ;

  - id: stt_timeout_to_idle
    mode: restart     # restart the timer if called before timeout
    then:
      if:
        condition:
          switch.is_on: continued_conversation
        then:
          - delay: !lambda "return id(continued_timeout).state * 1000;"
          - if:
              condition:
                lambda: return (id(voice_assistant_phase) == ${voice_assist_replying_phase_id});
              then:
                - wait_until:
                    condition:
                      lambda: return !(id(voice_assistant_phase) == ${voice_assist_replying_phase_id});
                      # normally this would complete and move to next phase with on_tts_stream_end,
                      # but sometimes this is missed so put a time limit on the wait
                    timeout: 5s
                - delay: 1s  # Give time for the stream to end and the phase to be switched back to listening and this timeout to be reset
                - script.execute: stt_timeout_to_idle
          - if:
              condition:
                lambda: return (id(voice_assistant_phase) == ${voice_assist_timer_finished_phase_id});
              then:
                - wait_until:
                    condition:
                      lambda: return !(id(voice_assistant_phase) == ${voice_assist_timer_finished_phase_id});
                      # normally this would complete and move to next phase with on_tts_stream_end,
                      # but sometimes this is missed so put a time limit on the wait
                    timeout: 5s
                - delay: 1s  # Give time for the stream to end and the phase to be switched back to listening and this timeout to be reset
                - script.execute: stt_timeout_to_idle
          - script.execute: return_to_idle

  - id: return_to_idle
    then:
      - if:
          condition:
            lambda: return id(wake_word_engine_location).state == "On device";
          then:
            - script.stop: stt_timeout_to_idle
            - if:
                condition:
                  voice_assistant.is_running
                then:
                  - lambda: id(va).set_use_wake_word(false);
                  - voice_assistant.stop
                  - wait_until:
                      condition:
                        not:
                          voice_assistant.is_running
                      timeout: 5s
            - if:
                condition:
                  not:
                    micro_wake_word.is_running
                then:
                  - micro_wake_word.start
      - if:
          condition:
            lambda: return id(wake_word_engine_location).state == "In Home Assistant";
          then:
            - if:
                condition:
                  micro_wake_word.is_running
                then:
                  - micro_wake_word.stop
                  - wait_until:
                      condition:
                        not:
                          micro_wake_word.is_running
                      timeout: 5s
            - wait_until:
                condition:
                  not:
                    voice_assistant.is_running
                timeout: 5s
            - lambda: id(va).set_use_wake_word(true);
            - if:
                condition:
                  - not:
                      voice_assistant.is_running
                then:
                  - voice_assistant.start_continuous
      - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
      - script.execute: draw_display

  - id: draw_display
    then:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:
            - if:
                condition:
                  wifi.connected:
                then:
                  - if:
                      condition:
                        api.connected:
                      then:
                        - lambda: |
                            switch(id(voice_assistant_phase)) {
                              case ${voice_assist_listening_phase_id}:
                                id(s3_box_lcd).show_page(listening_page);
                                id(s3_box_lcd).update();
                                break;
                              case ${voice_assist_thinking_phase_id}:
                                id(s3_box_lcd).show_page(thinking_page);
                                id(s3_box_lcd).update();
                                break;
                              case ${voice_assist_replying_phase_id}:
                                id(s3_box_lcd).show_page(replying_page);
                                id(s3_box_lcd).update();
                                break;
                              case ${voice_assist_error_phase_id}:
                                id(s3_box_lcd).show_page(error_page);
                                id(s3_box_lcd).update();
                                break;
                              case ${voice_assist_not_ready_phase_id}:
                                id(s3_box_lcd).show_page(no_ha_page);
                                id(s3_box_lcd).update();
                                break;
                              case ${voice_assist_timer_finished_phase_id}:
                                id(s3_box_lcd).show_page(timer_finished_page);
                                id(s3_box_lcd).update();
                                break;                          
                              case ${voice_assist_playing_id}:
                                id(s3_box_lcd).show_page(playing_page);
                                id(s3_box_lcd).update();
                                break; 
                              case ${volume_up_phase_id}:
                                id(s3_box_lcd).show_page(volume_up_page);
                                id(s3_box_lcd).update();
                                break; 
                              case ${volume_down_phase_id}:
                                id(s3_box_lcd).show_page(volume_down_page);
                                id(s3_box_lcd).update();
                                break;                                                                
                              default:
                                id(s3_box_lcd).show_page(idle_page);
                                id(s3_box_lcd).update();
                            }
                      else:
                        - display.page.show: no_ha_page
                        - component.update: s3_box_lcd
                else:
                  - display.page.show: no_wifi_page
                  - component.update: s3_box_lcd
          else:
            - display.page.show: initializing_page
            - component.update: s3_box_lcd
  
  # finds the active timer with the least amount of time left from the collection of timers and assigns it to a global variable 
  - id: fetch_first_active_timer
    then:
      - lambda: |
          const auto timers = id(va).get_timers();
          auto output_timer = timers.begin()->second;
          for (auto &iterable_timer : timers) {
            if (iterable_timer.second.is_active && iterable_timer.second.seconds_left <= output_timer.seconds_left) {
              output_timer = iterable_timer.second;
            }
          }
          id(global_first_active_timer) = output_timer;
  - id: check_if_timers_active
    then:
      - lambda: |
          const auto timers = id(va).get_timers();
          bool output = false;
          if (timers.size() > 0) {
            for (auto &iterable_timer : timers) {
              if(iterable_timer.second.is_active) {
                output = true;
              }
            }
          }
          id(global_is_timer_active) = output;
  - id: fetch_first_timer
    then:
      - lambda: |
          const auto timers = id(va).get_timers();
          auto output_timer = timers.begin()->second;
          for (auto &iterable_timer : timers) {
            if (iterable_timer.second.seconds_left <= output_timer.seconds_left) {
              output_timer = iterable_timer.second;
            }
          }
          id(global_first_timer) = output_timer;
  - id: check_if_timers
    then:
      - lambda: |
          const auto timers = id(va).get_timers();
          bool output = false;
          if (timers.size() > 0) {
            output = true;
          }
          id(global_is_timer) = output;

  - id: draw_timer_timeline
    then:
      - lambda: |
          id(check_if_timers_active).execute();
          id(check_if_timers).execute();
          if (id(global_is_timer_active)){
            id(fetch_first_active_timer).execute();
            int active_pixels = round( 320 * id(global_first_active_timer).seconds_left / max(id(global_first_active_timer).total_seconds , static_cast<uint32_t>(1)) );
            if (active_pixels > 0){
              id(s3_box_lcd).filled_rectangle(0 , 225 , 320 , 15 , Color::WHITE );
              id(s3_box_lcd).filled_rectangle(0 , 226 , active_pixels , 13 , id(active_timer_color) );
            }
          } else if (id(global_is_timer)){
            id(fetch_first_timer).execute();
            int active_pixels = round( 320 * id(global_first_timer).seconds_left / max(id(global_first_timer).total_seconds , static_cast<uint32_t>(1)));
            if (active_pixels > 0){
              id(s3_box_lcd).filled_rectangle(0 , 225 , 320 , 15 , Color::WHITE );
              id(s3_box_lcd).filled_rectangle(0 , 226 , active_pixels , 13 , id(paused_timer_color) );
            }
          }

  - id: stop_voice_assistant
    then:
      - if:
          condition:
            lambda: return id(wake_word_engine_location).state == "In Home Assistant";
          then:
            - lambda: id(va).set_use_wake_word(false);
            - voice_assistant.stop
      - if:
          condition:
            lambda: return id(wake_word_engine_location).state == "On device";
          then:
            - voice_assistant.stop
            - micro_wake_word.stop
      - lambda: id(voice_assistant_phase) = ${voice_assist_not_ready_phase_id};

switch:
  - platform: template
    name: Display conversation
    id: display_conversation
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: config
    on_turn_off:
      - script.execute: draw_display
    on_turn_on:
      - script.execute: draw_display

  - platform: template
    name: Display text prompts
    id: display_text
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: config
    on_turn_off:
      - script.execute: draw_display
    on_turn_on:
      - script.execute: draw_display

  - platform: template
    name: Mute
    id: mute
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: config
    on_turn_off:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:            
            - script.execute: return_to_idle
    on_turn_on:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:
            - lambda: id(va).set_use_wake_word(false);
            - if:
                condition:
                  - voice_assistant.is_running
                then:
                  - voice_assistant.stop
            - if:
                condition:
                  - micro_wake_word.is_running
                then:
                  - micro_wake_word.stop          
            - script.execute: draw_display
  
  - platform: template
    id: timer_ringing
    optimistic: true
    internal: true
    restore_mode: ALWAYS_OFF
    on_turn_on:
      - delay: 2min
      - switch.turn_off: timer_ringing

  - platform: template
    name: Continued conversation
    id: continued_conversation
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: config
    on_turn_off:
      - script.execute: return_to_idle
    on_turn_on:
      - script.execute: return_to_idle
  
  - platform: template
    name: "Mute when absent"
    id: mute_when_absent
    icon: mdi:account-right-arrow
    optimistic: true
    entity_category: config
    restore_mode: RESTORE_DEFAULT_OFF

  - platform: template
    name: Mute Speaker
    id: mute_speaker
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: config
    on_turn_off:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:            
            - lambda: |-
                if (id(speaker_volume_backup) > 0) {          
                  id(speaker_volume) = id(speaker_volume_backup);
                } else {
                  id(speaker_volume) = id(startup_volume).state;
                }
            - script.execute: set_volume        
            - script.execute: draw_display   
    on_turn_on:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:
            - lambda: |-          
                id(speaker_volume_backup) = static_cast<int>(id(speaker_media_player).volume * 100);
                if (id(speaker_volume) > 0) {
                  id(speaker_volume) = 0;
                }
            - script.execute: set_volume        
            - script.execute: draw_display             

  - platform: at581x
    at581x_id: "Radar"
    name: "Enable Radar"
    id: enable_radar

  - platform: restart
    name: S3 restart

number:
  - platform: template
    entity_category: config
    name: Continued timeout
    id: continued_timeout
    icon: mdi:clock
    optimistic: true
    restore_value: true
    initial_value: 8
    min_value: 1
    step: 1
    max_value: 10
    unit_of_measurement: s
    mode: slider

  - platform: template
    name: "Presence duration"
    id: radar_delayed_off
    icon: mdi:account-clock
    optimistic: true
    restore_value: true
    initial_value: 60
    min_value: 0
    step: 5
    max_value: 300
    unit_of_measurement: s
    entity_category: config
    mode: box

  - platform: template
    entity_category: config
    name: Startup volume
    id: startup_volume
    icon: mdi:volume-medium
    optimistic: true
    restore_value: true
    initial_value: 75
    min_value: 0
    step: 5
    max_value: 100
    unit_of_measurement: "%"
    mode: slider

select:
  - platform: template
    entity_category: config
    name: Wake word engine location
    id: wake_word_engine_location
    optimistic: true
    restore_value: true
    options:
      - In Home Assistant
      - On device
    initial_option: On device
    on_value:
      - wait_until:
          lambda: return id(voice_assistant_phase) == ${voice_assist_idle_phase_id};
      - script.execute: return_to_idle

  - platform: template
    entity_category: config
    name: Display clock date
    id: display_date
    optimistic: true
    restore_value: true
    options:
      - None
      - Short (US)
      - Short (UK)
      - Short (EU)
      - Long
      - Long with weekday
      - Weekday only
    initial_option: None
    on_value:
      - lambda: |-
          switch (i) {
            case 0:
              id(date_format_string) = "";
              break;
            case 1:
              id(date_format_string) = "%m/%d/%y";
              break;
            case 2:
              id(date_format_string) = "%d/%m/%y";
              break;
            case 3:
              id(date_format_string) = "%d.%m.%y";
              break;
            case 4:
              id(date_format_string) = "%d %b, %Y";
              break;
            case 5:
              id(date_format_string) = "%a, %d %b, %Y";
              break;
            case 6:
              id(date_format_string) = "%A";
              break;
          }
      - script.execute: draw_display

  - platform: template
    entity_category: config
    name: Display clock time
    id: display_time
    optimistic: true
    restore_value: true
    options:
      - None
      - 12 hour
      - 24 hour
    initial_option: 12 hour
    on_value:
      - lambda: |-
          switch (i) {
            case 0:
              id(time_format_string) = "";
              break;
            case 1:
              id(time_format_string) = "%I:%M %p";
              break;
            case 2:
              id(time_format_string) = "%H:%M";
              break;
          }
      - script.execute: draw_display

globals:
  - id: init_in_progress
    type: bool
    restore_value: false
    initial_value: "true"
  - id: voice_assistant_phase
    type: int
    restore_value: false
    initial_value: ${voice_assist_not_ready_phase_id}
  - id: global_first_active_timer
    type: voice_assistant::Timer
    restore_value: false
  - id: global_is_timer_active
    type: bool
    restore_value: false
  - id: global_first_timer
    type: voice_assistant::Timer
    restore_value: false
  - id: global_is_timer
    type: bool
    restore_value: false
  - id: voice_assistant_phase_backup
    type: int
    restore_value: false
    initial_value: ${voice_assist_not_ready_phase_id}
  - id: date_format_string
    type: std::string
    restore_value: true
    initial_value: ""
  - id: time_format_string
    type: std::string
    restore_value: true
    initial_value: ""
  - id: speaker_volume
    type: int
    restore_value: no
    initial_value: '50'
  - id: replying_to_query
    type: bool
    restore_value: false
    initial_value: "false"
  - id: speaker_volume_backup
    type: int
    restore_value: no
    initial_value: ''
  - id: mute_backup
    type: bool
    restore_value: false
    initial_value: "false"
  - id: acknowledge
    type: bool
    restore_value: false
    initial_value: "false"

image:
  - file: ${error_illustration_file}
    id: casita_error
    resize: 320x240
    type: RGB
    transparency: alpha_channel
  - file: ${idle_illustration_file}
    id: casita_idle
    resize: 320x240
    type: RGB
    transparency: alpha_channel
  - file: ${listening_illustration_file}
    id: casita_listening
    resize: 320x240
    type: RGB
    transparency: alpha_channel
  - file: ${thinking_illustration_file}
    id: casita_thinking
    resize: 320x240
    type: RGB
    transparency: alpha_channel
  - file: ${replying_illustration_file}
    id: casita_replying
    resize: 320x240
    type: RGB
    transparency: alpha_channel
  - file: ${timer_finished_illustration_file}
    id: casita_timer_finished
    resize: 320x240
    type: RGB
    transparency: alpha_channel
  - file: ${loading_illustration_file}
    id: casita_initializing
    resize: 320x240
    type: RGB
    transparency: alpha_channel
  - file: https://github.com/esphome/firmware/raw/main/voice-assistant/error_box_illustrations/error-no-wifi.png
    id: error_no_wifi
    resize: 320x240
    type: RGB
    transparency: alpha_channel
  - file: https://github.com/esphome/firmware/raw/main/voice-assistant/error_box_illustrations/error-no-ha.png
    id: error_no_ha
    resize: 320x240
    type: RGB
    transparency: alpha_channel
  - file: mdi:volume-plus
    id: volume_up
    resize: 240x180
    type: BINARY
    transparency: chroma_key
  - file: mdi:volume-minus
    id: volume_down
    resize: 240x180
    type: BINARY
    transparency: chroma_key
  - file: mdi:microphone-off
    id: mic_mute
    resize: 28x21
    type: BINARY
    transparency: chroma_key
  - file: mdi:volume-mute
    id: speaker_mute
    resize: 28x21
    type: BINARY
    transparency: chroma_key

font:
  - file:
      type: gfonts
      family: Roboto
      weight: 300
    # glyphs: ${allowed_characters}
    id: font_text
    size: 16
  - file:
      type: gfonts
      family: Figtree
      weight: 300
      italic: true
    # glyphs: ${allowed_characters}
    id: font_request
    size: 15
  - file:
      type: gfonts
      family: Figtree
      weight: 300
    # glyphs: ${allowed_characters}
    id: font_response
    size: 15
  - file:
      type: gfonts
      family: Roboto Mono
      weight: 300
    # glyphs: ${allowed_characters}
    id: font_timer
    size: 46

text_sensor:
  - id: text_request
    name: Assist query
    platform: template
    on_value:
      lambda: |-
        if(id(text_request).state.length()>32) {
          std::string name = id(text_request).state.c_str();
          std::string truncated = esphome::str_truncate(name.c_str(),31);
          id(text_request).state = (truncated+"...").c_str();
        }

  - id: text_response
    name: Assist reply
    platform: template
    on_value:
      lambda: |-
        if(id(text_response).state.length()>32) {
          std::string name = id(text_response).state.c_str();
          std::string truncated = esphome::str_truncate(name.c_str(),31);
          id(text_response).state = (truncated+"...").c_str();
        }

  - platform: wifi_info
    ip_address:
      update_interval: 60s
      name: IP Address
      entity_category: "diagnostic"
    ssid:
      update_interval: 60s
      name: Connected SSID
      entity_category: "diagnostic"
    bssid:
      update_interval: 60s
      name: Connected BSSID
      entity_category: "diagnostic"
    mac_address:
      name: Mac Wifi Address
      entity_category: "diagnostic"
    scan_results:
      update_interval: 60s
      name: Latest Scan Results
      entity_category: "diagnostic"

  # Device Uptime Information 
  - platform: template
    name: Uptime Human Readable
    id: uptime_human
    icon: mdi:clock-start

color:
  - id: idle_color
    hex: ${idle_illustration_background_color}
  - id: listening_color
    hex: ${listening_illustration_background_color}
  - id: thinking_color
    hex: ${thinking_illustration_background_color}
  - id: replying_color
    hex: ${replying_illustration_background_color}
  - id: loading_color
    hex: ${loading_illustration_background_color}
  - id: error_color
    hex: ${error_illustration_background_color}
  - id: active_timer_color
    hex: "26ed3a"
  - id: paused_timer_color
    hex: "3b89e3"
  - id: text_outline_color
    hex: ${text_outline_color}

spi:
  - id: spi_bus
    clk_pin: 7
    mosi_pin: 6

time:
  - platform: homeassistant
    id: the_time    
    on_time:
      - cron: 0 * * * * *
        then:
          - if:
              condition:
                - lambda: return ( std::string(id(time_format_string).c_str()) != "" );
              then:
                # - logger.log: "(on_time) Updating time display"
                - script.execute: draw_display
      - cron: 1 0 0 * * *
        then:
          - if:
              condition:
                - lambda: return ( std::string(id(date_format_string).c_str()) != "" );
              then:
                # - logger.log: "(on_time) Updating date display"
                - script.execute: draw_display

display:
  - platform: ili9xxx
    id: s3_box_lcd
    model: S3BOX
    data_rate: 40MHz
    cs_pin: 5
    dc_pin: 4
    invert_colors: false
    reset_pin:
      number: 48
      inverted: true
    update_interval: never
    pages:
      - id: idle_page
        lambda: |-
          // Drawing background colour
          
          it.fill(id(idle_color));
          
          // Show timer instead of graphic if timer is on
          id(check_if_timers_active).execute();
          if (id(global_is_timer_active)){

            id(fetch_first_active_timer).execute();
            int hours_left = floor(id(global_first_active_timer).seconds_left / 3600);
            int minutes_left = floor((id(global_first_active_timer).seconds_left - hours_left * 3600) / 60);
            int seconds_left = id(global_first_active_timer).seconds_left - hours_left * 3600 - minutes_left * 60 ;
            auto display_hours = (hours_left < 10 ? "0" : "") + std::to_string(hours_left);
            auto display_minute = (minutes_left < 10 ? "0" : "") + std::to_string(minutes_left);
            auto display_seconds = (seconds_left  < 10 ? "0" : "") + std::to_string(seconds_left) ;

            std::string display_string = "";
            if (hours_left > 0) {
              display_string = display_hours + ":" + display_minute;
            } else {
              display_string = display_minute + ":" + display_seconds;
            }            
            it.printf(it.get_width() / 2, (it.get_height() / 2), id(font_timer), Color::WHITE, TextAlign::CENTER, "%s", display_string.c_str());        
           
          } else {

            // Drawing background idle picture
                        
            it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_idle), ImageAlign::CENTER);
          }

          // Volume or mute on right top corner 
          
          if (id(speaker_media_player).volume > 0) {
            char media_player_volume_display[80];
            sprintf(media_player_volume_display, "Volume: %.0f%%", id(speaker_media_player).volume * 100);

            int x1_vol, y1_vol, text_width_vol, text_height_vol;                  
            it.get_text_bounds(0, 0, media_player_volume_display, id(font_text), TextAlign::TOP_LEFT, &x1_vol, &y1_vol, &text_width_vol, &text_height_vol); // Get the text dimensions            
            int rect_width_vol = text_width_vol + 10; // 5-pixel padding
            int rect_height_vol = text_height_vol + 10; // 5-pixel padding
            int rect_x_vol = it.get_width() - 10 - rect_width_vol; // Width of screen minus margin from the right minus width of rectangle 
            int rect_y_vol = 10; // Margin from the top
            int text_x_vol = rect_x_vol + 5; // 5-pixel padding
            int text_y_vol = rect_y_vol + 5; // 5-pixel padding

            it.filled_rectangle(rect_x_vol, rect_y_vol, rect_width_vol, rect_height_vol, Color::BLACK); // Draw the black rectangle            
            it.printf(text_x_vol, text_y_vol, id(font_text), Color::WHITE, "Volume: %.0f%%", id(speaker_media_player).volume * 100); // Print the volume in white
          } else {
              it.filled_rectangle(277, 10, 38, 31, Color::BLACK); // Draw the black rectangle            
              it.image(282, 15, id(speaker_mute), ImageAlign::TOP_LEFT);
          }
          
          //Wake word prompt or microphone mute in left top corner
          
          if ( id(display_text).state && !id(mute).state ) {
            int x1, y1, text_width, text_height;
            it.get_text_bounds(0, 0, "${wake_word_prompt}", id(font_text), TextAlign::TOP_LEFT, &x1, &y1, &text_width, &text_height); // Get the text dimensions            
            int rect_width = text_width + 10; // 5-pixel padding
            int rect_height = text_height + 10; // 5-pixel padding
            int rect_x = 10; // Margin from the left
            int rect_y = 10; // Margin from the top
            int text_x = rect_x + 5; // 5-pixel padding
            int text_y = rect_y + 5; // 5-pixel padding

            it.filled_rectangle(rect_x, rect_y, rect_width, rect_height, Color::BLACK); // Draw the black rectangle            
            it.print( text_x, text_y, id(font_text), Color::WHITE, "${wake_word_prompt}" ); // Print the text in white
          } else if ( id(display_text).state && id(mute).state ) {
              it.filled_rectangle(5, 10, 38, 31, Color::BLACK); // Draw the black rectangle            
              it.image(10, 15, id(mic_mute), ImageAlign::TOP_LEFT);
          }  

          //Date and time in bottom middle if no timer
          
          if ( (std::string(id(date_format_string).c_str()) != "" or std::string(id(time_format_string).c_str()) != "") and !id(global_is_timer) ) {
            // Get the format strings
            std::string date_format = id(date_format_string).c_str();
            std::string time_format = id(time_format_string).c_str();
            // Construct the format string
            std::string format_string;
            if (!date_format.empty() && !time_format.empty()) {
                format_string = date_format + " - " + time_format;
            } else if (!date_format.empty()) {
                format_string = date_format;
            } else {
                format_string = time_format;
            }
            // Get the current date and time text
            auto date_time_text = id(the_time).now().strftime(format_string.c_str());
            if (id(display_time).state == "12 hour") {
              // Remove leading zeros from day and hour
              size_t pos = date_time_text.find(" 0");
              while (pos != std::string::npos) {
                date_time_text.erase(pos + 1, 1); // Remove the leading zero
                pos = date_time_text.find(" 0", pos); // Find the next occurrence
              }
            }

            int x1, y1, text_width, text_height;
            it.get_text_bounds(0, 0, date_time_text.c_str(), id(font_text), TextAlign::TOP_LEFT, &x1, &y1, &text_width, &text_height); // Get the text dimensions
            int rect_width = text_width + 10; // 5-pixel padding
            int rect_height = text_height + 10; // 5-pixel padding
            int rect_x = (it.get_width() - rect_width) / 2; // Centered
            int rect_y = it.get_height() - rect_height - 8; // margin from the bottom
            int text_x = rect_x + (rect_width - text_width) / 2; // Centered
            int text_y = rect_y + 5; // 5-pixel padding

            it.filled_rectangle(rect_x, rect_y, rect_width, rect_height, Color::BLACK); // Draw the black rectangle            
            it.printf( text_x, text_y, id(font_text), Color::WHITE, TextAlign::TOP_LEFT, "%s", date_time_text.c_str() ); // Print the text in white
          }

          // timer if active 

          id(draw_timer_timeline).execute();          
          
      - id: listening_page
        lambda: |-
          it.fill(id(listening_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_listening), ImageAlign::CENTER);
          
          //if (id(global_is_timer)) {
          id(draw_timer_timeline).execute();
          //}

          if ( id(display_text).state ) {
            int x1, y1, text_width, text_height;
            it.get_text_bounds(0, 0, "${listening_prompt}", id(font_text), TextAlign::TOP_LEFT, &x1, &y1, &text_width, &text_height); // Get the text dimensions
            it.filled_rectangle(10, 10, text_width + 10, text_height + 10, Color::WHITE); // Draw the white rectangle            
            it.print( 15, 15, id(font_text), Color::BLACK, "${listening_prompt}" ); // Print the text in black
          }

      - id: playing_page
        lambda: |-
          it.fill(id(replying_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_replying), ImageAlign::CENTER);
          
      - id: thinking_page
        lambda: |-
          it.fill(id(thinking_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_thinking), ImageAlign::CENTER);
          if (id(display_conversation).state) {
            it.filled_rectangle(20 , 20 , 280 , 30 , Color::WHITE );            
            it.printf(30, 25, id(font_request), Color::BLACK, "%s", id(text_request).state.c_str());
          }
          //if (id(global_is_timer)) {
          id(draw_timer_timeline).execute();
          //}
      - id: replying_page
        lambda: |-
          it.fill(id(replying_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_replying), ImageAlign::CENTER);
          if (id(display_conversation).state) {
            it.filled_rectangle(20 , 20 , 280 , 30 , Color::WHITE );            
            it.filled_rectangle(20 , 190 , 280 , 30 , Color::WHITE );            
            it.printf(30, 25, id(font_request), Color::BLACK, "%s", id(text_request).state.c_str());
            it.printf(30, 195, id(font_response), Color::BLACK, "%s", id(text_response).state.c_str());
          }
          //if (id(global_is_timer)) {
          id(draw_timer_timeline).execute();
          //}
      - id: timer_finished_page
        lambda: |-
          it.fill(id(idle_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_timer_finished), ImageAlign::CENTER);
      - id: error_page
        lambda: |-
          it.fill(id(error_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_error), ImageAlign::CENTER);
          if ( id(display_text).state ) {
            int x1, y1, text_width, text_height;
            it.get_text_bounds(0, 0, "${error_prompt}", id(font_text), TextAlign::TOP_LEFT, &x1, &y1, &text_width, &text_height); // Get the text dimensions
            it.filled_rectangle(10, 10, text_width + 10, text_height + 10, Color::BLACK); // Draw the black rectangle            
            it.print( 15, 15, id(font_text), Color::WHITE, "${error_prompt}" ); // Print the text in white
          }
      - id: no_ha_page
        lambda: |-
          it.image((it.get_width() / 2), (it.get_height() / 2), id(error_no_ha), ImageAlign::CENTER);
      - id: no_wifi_page
        lambda: |-
          it.image((it.get_width() / 2), (it.get_height() / 2), id(error_no_wifi), ImageAlign::CENTER);
      - id: initializing_page
        lambda: |-
          it.fill(id(loading_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(casita_initializing), ImageAlign::CENTER);
          if ( id(display_text).state ) {
            int x1, y1, text_width, text_height;
            it.get_text_bounds(0, 0, "${starting_up}", id(font_text), TextAlign::TOP_LEFT, &x1, &y1, &text_width, &text_height); // Get the text dimensions
            it.filled_rectangle(10, 10, text_width + 10, text_height + 10, Color::BLACK); // Draw the black rectangle            
            it.print( 15, 15, id(font_text), Color::WHITE, "${starting_up}" ); // Print the text in white
          }
      - id: volume_up_page
        lambda: |-
          it.image((it.get_width() / 2), (it.get_height() / 2), id(volume_up), ImageAlign::CENTER);
      - id: volume_down_page
        lambda: |-
          it.image((it.get_width() / 2), (it.get_height() / 2), id(volume_down), ImageAlign::CENTER);
  
sensor:
  - platform: adc
    pin: GPIO10
    name: "Battery voltage"
    id: battery_voltage
    unit_of_measurement: "V"
    accuracy_decimals: 3
    device_class: "voltage"
    entity_category: "diagnostic"
    disabled_by_default: true
    update_interval: 60s
    attenuation: auto
    filters:
      - multiply: 4.01

  - platform: copy
    source_id: battery_voltage
    name: "Battery level"
    unit_of_measurement: "%"
    accuracy_decimals: 0
    device_class: "battery"
    entity_category: "diagnostic"
    filters:
      - lambda: return (x - 3.1) / (4.14 - 3.1) * 100;
      - clamp:
          min_value: 0
          max_value: 100
          ignore_out_of_range: true
  
  - platform: wifi_signal
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  # ESP Chip-Temperatur
  - platform: internal_temperature
    name: "Internal Temperature"
    entity_category: "diagnostic"

  # Device Uptime Information
  - platform: uptime
    name: Uptime
    id: uptime_sensor
    entity_category: "diagnostic"
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str(); 
  
  - platform: aht10
    variant: AHT20
    i2c_id: bus_b
    temperature:
      name: "Temperature ${sensor_area}"
    humidity:
      name: "Humidity ${sensor_area}"
    update_interval: 60s

touchscreen:
  - platform: gt911
    i2c_id: bus_a
    interrupt_pin: GPIO3
    update_interval: 20ms
    on_touch:
      - logger.log:
          format: Touch %d at (%d, %d)
          args: [touch.id, touch.x, touch.y]
